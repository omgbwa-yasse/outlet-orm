/**
 * Exemple d'utilisation des mod√®les g√©n√©r√©s avec relations automatiques
 *
 * Ce fichier d√©montre comment utiliser les mod√®les ORM g√©n√©r√©s automatiquement
 * avec toutes leurs relations d√©tect√©es.
 */

const { DatabaseConnection, Model } = require('outlet-orm');

// Configuration de la base de donn√©es
const db = new DatabaseConnection({
  driver: 'mysql',
  host: 'localhost',
  database: 'blog_db',
  user: 'root',
  password: 'secret',
  port: 3306
});

Model.setConnection(db);

// ==================== Importer les mod√®les g√©n√©r√©s ====================
const User = require('./models/User');
const Role = require('./models/Role');
const Profile = require('./models/Profile');
const Post = require('./models/Post');
const Category = require('./models/Category');
const Comment = require('./models/Comment');
const Tag = require('./models/Tag');

// ==================== Exemples d'utilisation ====================

async function examples() {
  try {
    await db.connect();
    console.log('‚úÖ Connect√© √† la base de donn√©es\n');

    // ==================== 1. Relations belongsTo ====================
    console.log('üìå 1. Relations belongsTo (Appartient √†)\n');

    // R√©cup√©rer un article avec son auteur
    const post = await Post.find(1);
    const author = await post.user(); // belongsTo
    console.log(`Article: "${post.getAttribute('title')}"`);
    console.log(`Auteur: ${author.getAttribute('name')}\n`);

    // R√©cup√©rer un profil avec son utilisateur
    const profile = await Profile.find(1);
    const profileUser = await profile.user(); // belongsTo
    console.log(`Profil: ${profile.getAttribute('bio')}`);
    console.log(`Utilisateur: ${profileUser.getAttribute('name')}\n`);

    // ==================== 2. Relations hasMany ====================
    console.log('üìå 2. Relations hasMany (A plusieurs)\n');

    // R√©cup√©rer un utilisateur avec tous ses articles
    const user = await User.find(1);
    const userPosts = await user.posts(); // hasMany (g√©n√©r√© automatiquement!)
    console.log(`Utilisateur: ${user.getAttribute('name')}`);
    console.log(`Nombre d'articles: ${userPosts.length}`);
    userPosts.forEach(p => {
      console.log(`  - ${p.getAttribute('title')}`);
    });
    console.log('');

    // R√©cup√©rer une cat√©gorie avec tous ses articles
    const category = await Category.find(1);
    const categoryPosts = await category.posts(); // hasMany (g√©n√©r√© automatiquement!)
    console.log(`Cat√©gorie: ${category.getAttribute('name')}`);
    console.log(`Nombre d'articles: ${categoryPosts.length}\n`);

    // ==================== 3. Relations hasOne ====================
    console.log('üìå 3. Relations hasOne (A un seul)\n');

    // R√©cup√©rer un utilisateur avec son profil unique
    const userWithProfile = await User.find(1);
    const userProfile = await userWithProfile.profile(); // hasOne (d√©tect√© via UNIQUE!)
    console.log(`Utilisateur: ${userWithProfile.getAttribute('name')}`);
    console.log(`Bio: ${userProfile.getAttribute('bio')}`);
    console.log(`Site web: ${userProfile.getAttribute('website')}\n`);

    // ==================== 4. Relations belongsToMany ====================
    console.log('üìå 4. Relations belongsToMany (Plusieurs √† plusieurs)\n');

    // R√©cup√©rer un article avec tous ses tags
    const postWithTags = await Post.find(1);
    const tags = await postWithTags.tags(); // belongsToMany (d√©tect√© via table pivot!)
    console.log(`Article: "${postWithTags.getAttribute('title')}"`);
    console.log(`Tags:`);
    tags.forEach(tag => {
      console.log(`  - ${tag.getAttribute('name')}`);
    });
    console.log('');

    // R√©cup√©rer un tag avec tous ses articles
    const tag = await Tag.find(1);
    const tagPosts = await tag.posts(); // belongsToMany (d√©tect√© automatiquement!)
    console.log(`Tag: ${tag.getAttribute('name')}`);
    console.log(`Articles associ√©s: ${tagPosts.length}\n`);

    // ==================== 5. Relations r√©cursives ====================
    console.log('üìå 5. Relations r√©cursives (Auto-relations)\n');

    // Cat√©gorie avec sous-cat√©gories
    const parentCategory = await Category.find(1);
    const subCategories = await parentCategory.categories(); // hasMany vers soi-m√™me
    console.log(`Cat√©gorie: ${parentCategory.getAttribute('name')}`);
    console.log(`Sous-cat√©gories:`);
    subCategories.forEach(sub => {
      console.log(`  - ${sub.getAttribute('name')}`);
    });
    console.log('');

    // Sous-cat√©gorie avec sa cat√©gorie parent
    const subCategory = await Category.find(5);
    const parent = await subCategory.parent(); // belongsTo vers soi-m√™me
    console.log(`Sous-cat√©gorie: ${subCategory.getAttribute('name')}`);
    console.log(`Cat√©gorie parent: ${parent.getAttribute('name')}\n`);

    // Commentaire avec r√©ponses
    const comment = await Comment.find(1);
    const replies = await comment.comments(); // hasMany vers soi-m√™me
    console.log(`Commentaire: "${comment.getAttribute('content').substring(0, 50)}..."`);
    console.log(`Nombre de r√©ponses: ${replies.length}\n`);

    // ==================== 6. Eager Loading (Chargement anticip√©) ====================
    console.log('üìå 6. Eager Loading (Chargement anticip√©)\n');

    // Charger plusieurs articles avec leurs relations
    const postsWithRelations = await Post
      .with('user', 'category', 'tags', 'comments')
      .limit(5)
      .get();

    console.log(`Charg√© ${postsWithRelations.length} articles avec toutes leurs relations:`);
    postsWithRelations.forEach(p => {
      console.log(`\nArticle: "${p.getAttribute('title')}"`);
      console.log(`  Auteur: ${p.relations.user?.getAttribute('name')}`);
      console.log(`  Cat√©gorie: ${p.relations.category?.getAttribute('name')}`);
      console.log(`  Tags: ${p.relations.tags?.length || 0}`);
      console.log(`  Commentaires: ${p.relations.comments?.length || 0}`);
    });
    console.log('');

    // ==================== 7. Utilisation combin√©e ====================
    console.log('üìå 7. Utilisation combin√©e\n');

    // Trouver un utilisateur et afficher toutes ses donn√©es li√©es
    const fullUser = await User
      .with('role', 'profile', 'posts', 'comments')
      .find(1);

    console.log(`=== Profil complet de ${fullUser.getAttribute('name')} ===`);
    console.log(`Email: ${fullUser.getAttribute('email')}`);
    console.log(`R√¥le: ${fullUser.relations.role?.getAttribute('name')}`);
    console.log(`Bio: ${fullUser.relations.profile?.getAttribute('bio')}`);
    console.log(`Articles publi√©s: ${fullUser.relations.posts?.length || 0}`);
    console.log(`Commentaires: ${fullUser.relations.comments?.length || 0}\n`);

    // ==================== 8. Manipulation des relations many-to-many ====================
    console.log('üìå 8. Manipulation des relations many-to-many\n');

    // Attacher des tags √† un article
    const newPost = await Post.find(10);
    const postTags = await newPost.tags();

    // Attacher un nouveau tag
    await postTags.attach(3); // Attacher le tag ID 3
    console.log('‚úÖ Tag attach√© √† l\'article');

    // Attacher plusieurs tags
    await postTags.attach([4, 5, 6]);
    console.log('‚úÖ Plusieurs tags attach√©s');

    // Synchroniser les tags (remplace tous les tags existants)
    await postTags.sync([1, 2, 3]);
    console.log('‚úÖ Tags synchronis√©s');

    // D√©tacher un tag
    await postTags.detach(2);
    console.log('‚úÖ Tag d√©tach√©\n');

    // ==================== 9. Requ√™tes conditionnelles sur relations ====================
    console.log('üìå 9. Requ√™tes conditionnelles sur relations\n');

    // Trouver tous les utilisateurs qui ont au moins un article publi√©
    const activeAuthors = await User.query()
      .whereHas('posts', query => {
        query.where('status', 'published');
      })
      .get();
    console.log(`Auteurs actifs: ${activeAuthors.length}\n`);

    // ==================== 10. Comptage des relations ====================
    console.log('üìå 10. Comptage des relations\n');

    // Compter les articles d'une cat√©gorie sans les charger
    const categoryWithCount = await Category.find(1);
    const postsCount = await categoryWithCount.posts().count();
    console.log(`Cat√©gorie "${categoryWithCount.getAttribute('name')}" a ${postsCount} articles`);

    // Compter les commentaires d'un article
    const postWithCount = await Post.find(1);
    const commentsCount = await postWithCount.comments().count();
    console.log(`Article "${postWithCount.getAttribute('title')}" a ${commentsCount} commentaires\n`);

    console.log('‚úÖ Tous les exemples termin√©s!');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error(error.stack);
  } finally {
    await db.close();
  }
}

// Ex√©cuter les exemples
if (require.main === module) {
  examples();
}

module.exports = { examples };
